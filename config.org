#+TITLE: Austin's EMACS config
#+AUTHOR: Austin Meier
#+DESCRIPTION: Austin's personal emacs configuration file
#+STARTUP showeverything
#+OPTIONS toc:2

* TABLE OF CONTENTS :toc:
- [[#important-programs-to-load-first][IMPORTANT PROGRAMS TO LOAD FIRST]]
  - [[#elpaca-package-manager][Elpaca Package Manager]]
  - [[#load-the-evil][Load the EVIL]]
  - [[#helpers][Helpers]]
  - [[#keybindings][Keybindings]]
- [[#visual-preferences---gui][VISUAL PREFERENCES - GUI]]
  - [[#disable-some-default-emacs-item][Disable some default emacs item]]
  - [[#line-numbers][Line Numbers]]
  - [[#doom-theme][Doom Theme]]
  - [[#fontstext][Fonts/Text]]
- [[#completions][Completions]]
  - [[#company-mode][Company Mode]]
- [[#org-mode][ORG MODE]]
  - [[#enable-table-of-contents][Enable Table of Contents]]
  - [[#org-bullets][Org Bullets]]
- [[#languages][Languages]]
  - [[#lsp][LSP]]
  - [[#treesitter][Treesitter]]
  - [[#debugger][Debugger]]
- [[#which-key][WHICH-KEY]]

* IMPORTANT PROGRAMS TO LOAD FIRST

** Elpaca Package Manager
#+begin_src emacs-lisp
  (defvar elpaca-installer-version 0.11)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                              :ref nil :depth 1 :inherit ignore
                              :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                              :build (:not elpaca--activate-package)))
(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
       (build (expand-file-name "elpaca/" elpaca-builds-directory))
       (order (cdr elpaca-order))
       (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (<= emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
        (if-let* ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                  ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
                                                  ,@(when-let* ((depth (plist-get order :depth)))
                                                      (list (format "--depth=%d" depth) "--no-single-branch"))
                                                  ,(plist-get order :repo) ,repo))))
                  ((zerop (call-process "git" nil buffer t "checkout"
                                        (or (plist-get order :ref) "--"))))
                  (emacs (concat invocation-directory invocation-name))
                  ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                        "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                  ((require 'elpaca))
                  ((elpaca-generate-autoloads "elpaca" repo)))
            (progn (message "%s" (buffer-string)) (kill-buffer buffer))
          (error "%s" (with-current-buffer buffer (buffer-string))))
      ((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (let ((load-source-file-function nil)) (load "./elpaca-autoloads"))))
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))
#+end_src

** Load the EVIL

#+begin_src emacs-lisp
  ;; Install use-package support
  (elpaca elpaca-use-package
    ;; Enable use-package :ensure support for Elpaca.
    (elpaca-use-package-mode)
    (setq elpaca-use-package-by-default t))

  (elpaca-wait)

  ;;When installing a package usVed in the init file itself,
  ;;e.g. a package which adds a use-package key word,
  ;;use the :wait recipe keyword to block until that package is installed/configured.
  ;;For example:
  ;;(use-package general :ensure (:wait t) :demand t)

  (use-package evil
    :ensure t
    :demand t
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    :config
    (evil-mode 1))
  (use-package evil-collection
    :after evil
    :ensure t
    :config
    (evil-collection-init))

  ;;Turns off elpaca-use-package-mode current declaration
  ;;Note this will cause evaluate the declaration immediately. It is not deferred.
  ;;Useful for configuring built-in emacs features.
  (use-package emacs :ensure nil :config (setq ring-bell-function #'ignore))
#+end_src

** Helpers
#+begin_src emacs-lisp
  (setq config-file-location "~/.config/emacs/config.org")

  (defun open-config-file ()
    (interactive)
    (find-file config-file-location))

  (defun reload-config-file ()
    (interactive)
    (org-babel-load-file config-file-location))

  (defun open-eshell-below ()
    "Open an eshell in a new horizontally split window."
    (interactive)
    (split-window-below)
    (other-window 1)
    (eshell))

#+end_src

** Keybindings

#+begin_src emacs-lisp
  (use-package general
    :config
    (general-evil-setup)

    ;; Set 'SPC' to be our global leader key
    (general-create-definer austin/leader-keys
  			    :states '(normal insert visual emacs)
  			    :keymaps 'override
  			    :prefix "SPC"
  			    :global-prefix "M-SPC") ;; access leader in insert mode

    (austin/leader-keys
     "b"   '(:ignore t :wk "buffers")
     "bb"  '(switch-to-buffer :wk "switch buffer")
     "bk"  'kill-this-buffer :wk "kill this buffer"
     "bn"  '(next-buffer :wk "next buffer")
     "bp"  '(previous-buffer :wk "previous buffer")
     "br"  '(revert-buffer :wk "reload Buffer")
     
     "f"   '(:ignore t :wk "files")
     "ff"  '(find-file :wk "find file")
     "fh"  '((lambda () (interactive) (dired "~")) :wk "Open Home")
     "fs"  '(:ignore t :wk "search files")
     "fg"  '(:ignore t :wk "grep files")
     "fr"  '(:ignot t :wk "reload")
     "frc" '(reload-config-file :wk "reload config file")
     "fo"  '(:ignore t :wk "open files")
     "foh" '(:ignore t :wk "open home directory")

     "o"   '(:ignore t :wk "open")
     "ot"  '(open-eshell-below :wk "open terminal")
     "oc"  '(open-config-file :wk "open config file")

     "x"   '(execute-extended-command :wk "M-x")
     ":"   '(eval-expression :wk "Eval")
    )
  )
#+end_src

* VISUAL PREFERENCES - GUI

** Disable some default emacs item
*** Disable Toolbar + Scrollbars
#+begin_src emacs-lisp
  (setq inhibit-startup-screen t)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src

** Line Numbers
#+begin_src emacs-lisp
  (global-display-line-numbers-mode 1)
  (setq display-line-numbers-type 'relative)
#+end_src

** Doom Theme
#+begin_src emacs-lisp
(use-package doom-themes
  :ensure t
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-one t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  (doom-themes-neotree-config)
  ;; or for treemacs users
  (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
  (doom-themes-treemacs-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))
#+end_src

** Fonts/Text
#+begin_src emacs-lisp

      ;; Text Wrap
        (global-visual-line-mode nil)
        ;; Font Style 
        (setq-default font-height 120)
        (setq-default line-spacing 0.12)

      (let ((font-name "Hasklug Nerd Font Mono"))
        (when (member font-name (font-family-list))
          (set-face-attribute 'default nil
                              :font font-name
                              :height font-height
                              :weight 'regular)))

  (use-package nerd-icons-completion
    :config
    (nerd-icons-completion-mode))



        ;; Make comments and keywords italics
        (set-face-attribute 'font-lock-comment-face nil
                            :slant 'italic)
        (set-face-attribute 'font-lock-keyword-face nil
                            :slant 'italic)


#+end_src

* Completions

#+begin_src emacs-lisp
  (use-package vertico
  :custom
  ;; (vertico-scroll-margin 0) ;; Different scroll margin
  (vertico-count 10)
  (vertico-cycle t) ;; Enable cycling for `vertico-next/previous'
  ;; (vertico-resize t) ;; Grow and shrink the Vertico minibuffer
  :init
  (vertico-mode))
#+end_src

#+begin_src emacs-lisp
(use-package orderless
  :custom
  ;; Configure a custom style dispatcher (see the Consult wiki)
  ;; (orderless-style-dispatchers '(+orderless-consult-dispatch orderless-affix-dispatch))
  ;; (orderless-component-separator #'orderless-escapable-split-on-space)
  (completion-styles '(orderless basic))
  (completion-category-overrides '((file (styles partial-completion))))
  (completion-category-defaults nil) ;; Disable defaults, use our settings
  (completion-pcm-leading-wildcard t)) ;; Emacs 31: partial-completion behaves like substrin
#+end_src

** Company Mode
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :demand t
    :hook (after-init . global-company-mode)
    :custom
      (company-idle-delay 0.2)                ;; how long to wait before popup
      (company-minimum-prefix-length 1)       ;; start completing after first char
      (company-tooltip-align-annotations t)   ;; align annotation to the right
      (company-selection-wrap-around t)       ;; cycle through candidates
      (company-show-numbers t))                ;; quick selection via M-<number>

#+end_src

* ORG MODE

** Enable Table of Contents
#+begin_src emacs-lisp
  (use-package toc-org
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

** Org Bullets
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
  (use-package org-bullets)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

* Languages
** LSP
#+begin_src emacs-lisp
(use-package lsp-mode
  :init
  (setq lsp-keymap-prefix "C-c l")
  :hook ((emacs-lisp-mode . lsp)
         (lsp-mode . lsp-enable-which-key-integration))
  :commands lsp)
  
#+end_src

** Treesitter
#+begin_src emacs-lisp
(use-package treesit-auto
  :config
  (global-treesit-auto-mode))
#+end_src

** Debugger
#+begin_src emacs-lisp
(use-package dap-mode)
#+end_src

* WHICH-KEY
#+begin_src emacs-lisp
  (use-package which-key
    :config
    (setq which-key-side-window-location 'bottom
          which-key-sort-order #'which-key-key-order-alpha
          which-key-sort-uppercase-first nil
          which-key-add-column-padding 1
          which-key-max-display-columns nil
          which-key-min-display-lines 6
          which-key-side-window-slot -10
          which-key-side-window-max-height 0.25
          which-key-idle-delay 0
          which-key-max-description-length 25
          which-key-allow-imprecise-window-fit t
          which-key-separator " → ")
    (which-key-mode 1))
#+end_src

